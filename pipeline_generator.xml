<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>pipeline_generator</id>
	<initials>PG</initials>
	<title>Pipeline Generator</title>
	<icon>device_hub</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>true</anonymousRole>
	<transitionRole>false</transitionRole>
	<data type="enumeration">
		<id>system</id>
		<title>System</title>
		<options>
			<option key="Jenkins">Jenkins</option>
			<option key="Gitlab">Gitlab</option>
		</options>
		<init>Jenkins</init>
	</data>
	<data type="file">
		<id>config_file</id>
		<title>Config file</title>
	</data>
	<data type="taskRef">
		<id>taskRef_0</id>
		<title>Step</title>
	</data>
	<data type="button">
		<id>button_0</id>
		<title>Add step</title>
		<event type="set">
			<id>button_0_set</id>
			<actions phase="post">
				<action id="7">taskRef_0: f.taskRef_0;

def prefix = (useCase.processIdentifier.split("_")[0]) + "_";
def acase = createCase(prefix+"new_step", "New step");
def atask = findTask({ it.caseId.eq(useCase.stringId) });
setData("t1", acase, [
    "parent_id": [
        "value": useCase.stringId,
        "type": "text" 
    ],
    "parent_transition_id": [
        "value": atask.transitionId,
        "type": "text"
    ]
]);

change taskRef_0 value { 
    def list = taskRef_0.value + [findTask({ it.caseId.eq(acase.stringId) &amp; it.transitionId.eq("t1") })?.stringId]
    return list - null; 
}</action>
			</actions>
		</event>
	</data>
	<transition>
		<id>t1</id>
		<x>220</x>
		<y>300</y>
		<label>choose system</label>
		<dataGroup>
			<id>t1_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>system</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t1_assign</id>
		</event>
		<event type="finish">
			<id>t1_finish</id>
		</event>
		<event type="cancel">
			<id>t1_cancel</id>
		</event>
		<event type="delegate">
			<id>t1_delegate</id>
		</event>
	</transition>
	<transition>
		<id>t2</id>
		<x>460</x>
		<y>300</y>
		<label>build steps</label>
		<dataGroup>
			<id>t2_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>taskRef_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>2</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>4</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>t2_finish</id>
			<actions phase="post">
				<action id="1">taskRef_0: f.taskRef_0;
def resultMap = [build: []];
def cases = [];
taskRef_0.value.each { taskId -&gt;
    def atask = findTask({ it._id.eq(taskId) });
    def acase = findCase({ it._id.eq(atask.caseId) });
    cases &lt;&lt; acase;
    resultMap["build"] &lt;&lt; acase.getFieldValue("text_0");
}

cache "resultMap", resultMap;
change taskRef_0 value { []; }

async.run {
    cases.each {c -&gt; workflowService.deleteCase(c.stringId);}
}</action>
			</actions>
		</event>
		<event type="assign">
			<id>t2_assign</id>
		</event>
		<event type="cancel">
			<id>t2_cancel</id>
		</event>
		<event type="delegate">
			<id>t2_delegate</id>
		</event>
	</transition>
	<transition>
		<id>t3</id>
		<x>700</x>
		<y>300</y>
		<label>test steps</label>
		<dataGroup>
			<id>t3_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>taskRef_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>2</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>4</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>t3_finish</id>
			<actions phase="post">
				<action id="2">taskRef_0: f.taskRef_0;
def resultMap = cache "resultMap";
resultMap["test"] = [];
def cases = [];
taskRef_0.value.each { taskId -&gt;
    def atask = findTask({ it._id.eq(taskId) });
    def acase = findCase({ it._id.eq(atask.caseId) });
    cases &lt;&lt; acase;
    resultMap["test"] &lt;&lt; acase.getFieldValue("text_0");
}

cache "resultMap", resultMap;
change taskRef_0 value { []; }

async.run {
    cases.each {c -&gt; workflowService.deleteCase(c.stringId);}
}</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t4</id>
		<x>940</x>
		<y>300</y>
		<label>deploy steps</label>
		<dataGroup>
			<id>t4_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>taskRef_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>2</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>4</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>t4_finish</id>
			<actions phase="post">
				<action id="3">taskRef_0: f.taskRef_0;
def resultMap = cache "resultMap";
resultMap["deploy"] = [];
def cases = [];
taskRef_0.value.each { taskId -&gt;
    def atask = findTask({ it._id.eq(taskId) });
    def acase = findCase({ it._id.eq(atask.caseId) });
    cases &lt;&lt; acase;
    resultMap["deploy"] &lt;&lt; acase.getFieldValue("text_0");
}

cache "resultMap", resultMap;
change taskRef_0 value { []; }

async.run {
    cases.each {c -&gt; workflowService.deleteCase(c.stringId);}
}</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>t5</id>
		<x>1180</x>
		<y>300</y>
		<label>get file</label>
		<dataGroup>
			<id>t5_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>config_file</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t5_assign</id>
			<actions phase="pre">
				<action id="4">system: f.system,
config_file: f.config_file;

def resultMap = cache "resultMap";

def resultString = "";
def fileName = "";

if (system.value == "Jenkins") {

    fileName = "Jenkinsfile"
    def buildSteps = "";
    resultMap.build.each { step -&gt; 
        buildSteps += /sh '${step}'
                /;
    }

    def testSteps = "";
    resultMap.test.each { step -&gt; 
        testSteps += /sh '${step}'
                /;
    }

    def deploySteps = "";
    resultMap.deploy.each { step -&gt; 
        deploySteps += /sh '${step}'
                /;
    }

    resultString = /pipeline {
    agent any
    stages {
        stage('build') {
            steps {
                ${buildSteps}
            }
        }
        stage('test') {
            steps {
                ${testSteps}
            }
        }
        stage('deploy') {
            steps {
                ${deploySteps}
            }
        }
    }
}
/

} else if (system.value == "Gitlab") {
    fileName = ".gitlab-ci.yml"

    def buildSteps = "";
    resultMap.build.each { step -&gt; 
        buildSteps += /- ${step}
    /;
    }

    def testSteps = "";
    resultMap.test.each { step -&gt; 
        testSteps += /- ${step}
    /;
    }

    def deploySteps = "";
    resultMap.deploy.each { step -&gt; 
        deploySteps += /- ${step}
    /;
    }

    resultString = /stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    ${buildSteps}

test:
  stage: test
  script:
    ${testSteps}

deploy:
  stage: deploy
  script:
    ${deploySteps}
/
}

cacheFree "resultMap";


File file = new File("./storage/${fileName}").withWriter('utf-8') { writer -&gt; 
    writer.writeLine resultString
};
def fileValue = new com.netgrif.application.engine.petrinet.domain.dataset.FileFieldValue(fileName, "./storage/${fileName}")

change config_file value { fileValue }</action>
			</actions>
		</event>
	</transition>
	<place>
		<id>p1</id>
		<x>100</x>
		<y>300</y>
		<label>start</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p2</id>
		<x>340</x>
		<y>300</y>
		<label>chosen system</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p3</id>
		<x>580</x>
		<y>300</y>
		<label>build steps done</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p4</id>
		<x>820</x>
		<y>300</y>
		<label>test steps done</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p5</id>
		<x>1060</x>
		<y>300</y>
		<label>config file done</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<arc>
		<id>a1</id>
		<type>regular</type>
		<sourceId>p1</sourceId>
		<destinationId>t1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a2</id>
		<type>regular</type>
		<sourceId>t1</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a3</id>
		<type>regular</type>
		<sourceId>p2</sourceId>
		<destinationId>t2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a4</id>
		<type>regular</type>
		<sourceId>t2</sourceId>
		<destinationId>p3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>regular</type>
		<sourceId>p3</sourceId>
		<destinationId>t3</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a6</id>
		<type>regular</type>
		<sourceId>t3</sourceId>
		<destinationId>p4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a7</id>
		<type>regular</type>
		<sourceId>p4</sourceId>
		<destinationId>t4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a8</id>
		<type>regular</type>
		<sourceId>t4</sourceId>
		<destinationId>p5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a17</id>
		<type>read</type>
		<sourceId>p5</sourceId>
		<destinationId>t5</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>